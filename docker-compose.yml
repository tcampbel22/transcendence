services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - ./backend/setup:/usr/local/bin/setup
    user: "0"
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    command: ["/usr/local/bin/setup/setup-elk.sh"]
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - app_network

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
    mem_limit: 1g
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - app_network

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - app_network

  logstash:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    container_name: logstash
    user: root
    volumes:
      - certs:/usr/share/logstash/config/certs
      - ./backend/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./backend/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
      - ./backend/nginx/log:/var/log/nginx:ro
      - ./backend/user_service/logs:/var/log/user_service:ro
    ports:
      - 5044:5044
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:9600 | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    mem_limit: 1g
    networks:
      - app_network

  nginx:
    build:
      context: backend/nginx
      dockerfile: Dockerfile
    ports:
      - "4433:4433"
      - "8080:8080"
    depends_on:
      - game_service
    container_name: nginx
    volumes:
      - ./backend/nginx/log:/var/log/nginx
      - ./backend/user_service/uploads:/app/uploads:ro
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  game_service:
    build:
      context: ./backend/game_service
      dockerfile: Dockerfile
    container_name: game_service
    volumes:
      - ./backend/game_service/database/data:/app/database/data
      - ./backend/libs:/libs
      - ./backend/game_service/logs:/app/logs
    env_file:
      - ./backend/game_service/.env
    networks:
      - app_network
    restart: unless-stopped

  file_service:
    build:
      context: ./backend/file_service
      dockerfile: Dockerfile
    container_name: file_service
    volumes:
      - ./backend/libs:/libs
      - ./backend/file_service/logs:/app/logs
    networks:
      - app_network
    restart: unless-stopped

  user_service:
    build:
      context: ./backend/user_service
      dockerfile: Dockerfile
    container_name: user_service
    volumes:
      - ./backend/user_service/uploads:/app/uploads
      - ./backend/user_service/database/data:/app/database/data
      - ./backend/libs/error_lib:/app/node_modules/@app/errors
      - ./backend/libs:/libs
      - ./backend/user_service/logs:/app/logs
    env_file:
      - ./backend/user_service/.env
    networks:
      - app_network
    restart: unless-stopped

  googlesignin:
    build:
      context: backend/googleAuth
      dockerfile: Dockerfile
    depends_on:
      - game_service
    container_name: GoogleSignIn
    volumes:
      - ./backend/fastify/database/data:/app/database/data
    env_file:
      - .env
    networks:
      - app_network
    restart: unless-stopped

networks:
  app_network:
    driver: bridge

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
