services:
  # setup:
  #   profiles:
  #     - setup
  #   build:
  #     context: backend/setup
  #     args:
  #       ELASTIC_VERSION: ${ELASTIC_VERSION}
  #   init: true
  #   volumes:
  #     - ./backend/setup/entrypoint.sh:/entrypoint.sh:ro,Z
  #     - ./backend/setup/lib.sh:/lib.sh:ro,Z
  #     - ./backend/setup/roles:/roles:ro,Z
  #   container_name: setup
  #   environment:
  #     ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
  #     LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
  #     KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
  #     MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
  #     METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
  #     FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
  #     HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
  #     BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
  #   networks:
  #     - app_network
  #   depends_on:
  #     - elasticsearch

  nginx:
    build:
      context: backend/nginx
      dockerfile: Dockerfile
    ports:
      - "4433:4433"
      - "8080:8080"
    depends_on:
      - nodejs
    container_name: nginx
    networks:
      - app_network
    restart: unless-stopped

  nodejs:
    build:
      context: ./backend/api
      dockerfile: Dockerfile
    container_name: nodejs
    networks:
      - app_network
    restart: unless-stopped

  # elasticsearch:
  #   build:
  #     context: backend/elasticsearch
  #     args:
  #       ELASTIC_VERSION: ${ELASTIC_VERSION}
  #   volumes:
  #     - ./backend/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
  #     - elasticsearch:/usr/share/elasticsearch/data:Z
  #   container_name: elasticsearch
  #   environment:
  #     node.name: elasticsearch
  #     ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
  #     discovery.type: single-node
  #   ports:
  #     - "9200:9200"
  #     - "9300:9300"
  #   networks:
  #     - app_network
  #   restart: unless-stopped

  # logstash:
  #   build:
  #     context: backend/logstash
  #     args:
  #       ELASTIC_VERSION: ${ELASTIC_VERSION}
  #   volumes:
  #     - ./backend/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
  #     - ./backend/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
  #   container_name: logstash
  #   ports:
  #     - "5044:5044"
  #     - "50000:50000/tcp"
  #     - "50000:50000/udp"
  #     - "9600:9600"
  #   environment:
  #     LS_JAVA_OPTS: "-Xms256m -Xmx256m"
  #     LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
  #   networks:
  #     - app_network
  #   depends_on:
  #     - elasticsearch
  #   restart: unless-stopped

  # kibana:
  #   build:
  #     context: backend/kibana
  #     args:
  #       ELASTIC_VERSION: ${ELASTIC_VERSION}
  #   volumes:
  #     - ./backend/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
  #   container_name: kibana
  #   ports:
  #     - "5601:5601"
  #   environment:
  #     KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
  #   networks:
  #     - app_network
  #   depends_on:
  #     - elasticsearch
  #   restart: unless-stopped

networks:
  app_network:
    driver: bridge

#volumes:
#  elasticsearch:
